version: '3.8'

services:
  # Backend - Prolog Knowledge Engine
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: job-ready-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - backend-data:/app/data
      - ./logs/backend:/app/logs
    networks:
      - app-network
    environment:
      - PROLOG_STACK_LIMIT=4g
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - MAX_REQUESTS_PER_MINUTE=60
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "com.job-ready.service=backend"
      - "com.job-ready.version=1.0.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend - Nginx Web Server
  frontend:
    image: nginx:alpine
    container_name: job-ready-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html:ro
      - ./config.js:/usr/share/nginx/html/config.js:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "com.job-ready.service=frontend"
      - "com.job-ready.version=1.0.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service - Automated daily backups
  backup:
    image: alpine:latest
    container_name: job-ready-backup
    restart: unless-stopped
    volumes:
      - backend-data:/data:ro
      - ./backups:/backups
    networks:
      - app-network
    environment:
      - BACKUP_RETENTION_DAYS=30
    command: >
      sh -c "
      while true; do
        echo '[Backup] Starting backup at $(date)';
        BACKUP_FILE=/backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz;
        tar -czf $BACKUP_FILE /data 2>/dev/null && echo '[Backup] Created: $BACKUP_FILE' || echo '[Backup] Failed';
        find /backups -name 'backup-*.tar.gz' -mtime +${BACKUP_RETENTION_DAYS} -delete 2>/dev/null && echo '[Backup] Cleaned old backups';
        echo '[Backup] Next backup in 24 hours';
        sleep 86400;
      done
      "
    labels:
      - "com.job-ready.service=backup"

  # Monitoring - Prometheus (optional, uncomment to enable)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: job-ready-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   networks:
  #     - app-network
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   labels:
  #     - "com.job-ready.service=monitoring"

  # Grafana - Visualization (optional, uncomment to enable)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: job-ready-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - app-network
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   depends_on:
  #     - prometheus
  #   labels:
  #     - "com.job-ready.service=monitoring"

  # Watchtower - Auto-update containers (optional)
  # watchtower:
  #   image: containrrr/watchtower:latest
  #   container_name: job-ready-watchtower
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=86400
  #     - WATCHTOWER_LABEL_ENABLE=true
  #     - WATCHTOWER_LABEL_FILTER=com.job-ready.service
  #   labels:
  #     - "com.job-ready.service=watchtower"

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  backend-data:
    driver: local
    labels:
      - "com.job-ready.data=backend"
  # prometheus-data:
  #   driver: local
  # grafana-data:
  #   driver: local
